<?php
ini_set('max_execution_time', 600);
require_once('classes.inc.php');
?>

<HTML>
	<HEAD>
		<TITLE>Personal Inventory:  Database Backup and Restore</TITLE>
		<LINK REL="stylesheet" HREF="styles.css"/>
		<SCRIPT SRC="dropdowns.js"> </SCRIPT>
		<SCRIPT SRC="backup.js"> </SCRIPT>
	</HEAD>
	<BODY>
		<H1>Database Backup and Restore</H1>

<?php

switch ($_SERVER['REQUEST_METHOD']) {
	case 'POST':
		
		if(isset($_POST['action']) && ($_POST['action']=='Create Backup')) {
			$db = Database::getInstance();

			$db->export('items','items.csv');
			$db->export('attachments','attachments.csv');
			$db->export('locations','locations.csv');
			$db->export('groups','groups.csv');
			
			$zipname = 'inv-'.date('Ymd-His').'.zip';
			
			// Optionally pass thumbs=1 to include thumbs/* files in the backup.
			// If thumbnails are not included in the backup, they can be regenerated by calling Inventory::regenerateThumbs()
			if(isset($_POST['thumbs']) && ($_POST['thumbs']==1)) {
				shell_exec('zip -9o backups/'.$zipname.' items.csv attachments.csv locations.csv groups.csv attachments/* thumbs/*');
			} else {
				shell_exec('zip -9o backups/'.$zipname.' items.csv attachments.csv locations.csv groups.csv attachments/*');
			};
			
			unlink('items.csv');
			unlink('attachments.csv');
			unlink('locations.csv');
			unlink('groups.csv');

			echo('<p>Backup created.</p>');	
		};

		if(isset($_POST['action']) && ($_POST['action']=='Delete')) {
			if(isset($_POST['filename'])){
				$filename = $_POST['filename'];
				if (trim($filename[0])!=='') {
					// Prompt for confirmation
					echo('<P>Delete backup file '.trim($filename[0]).'?');
					echo('<FORM NAME="backupForm" ACTION="backup.php" METHOD="POST">');
					echo('<INPUT CLASS="shortButton" TYPE="submit" NAME="delConfirm" VALUE="Confirm"/>');
					echo('<INPUT CLASS="shortButton" TYPE="submit" NAME="delConfirm" VALUE="Cancel"/>');
					echo('<INPUT TYPE="HIDDEN" NAME="filename" VALUE="'.trim($filename[0]).'"/>');
					echo('</FORM>');
					return true;
				} else {
					echo('<P>No file selected.</P>');
				}
			} else {
				echo('<P>No file selected.</P>');
			};
		};
		
		if(isset($_POST['action']) && ($_POST['action']=='Restore')) {
			if(isset($_POST['filename'])) {
				$filename = $_POST['filename'];
				if (trim($filename[0])!=='') {
					// Prompt for confirmation
					echo('<P>Restore from backup file '.trim($filename[0]).'?');
					echo('<FORM NAME="backupForm" ACTION="backup.php" METHOD="POST">');
					echo('<INPUT TYPE="HIDDEN" NAME="restoreConfirm" VALUE=""/>');
					echo('<INPUT CLASS="shortButton" TYPE="button" NAME="restoreConfirmBtn[]" ID="restoreConfirmBtn[]" VALUE="Confirm" onClick="javascript:confirmRestore()"/>');
					echo('<INPUT CLASS="shortButton" TYPE="button" NAME="restoreConfirmBtn[]" ID="restoreConfirmBtn[]" VALUE="Cancel" onClick="javascript:confirmRestore()"/>');
					echo('<INPUT TYPE="HIDDEN" NAME="filename" VALUE="'.trim($filename[0]).'"/>');
					echo('</FORM>');
					echo('<SPAN ID="message"></SPAN>');
					return true;
				} else {
					echo('<P>No file selected.</P>');
				};
			} else {
				echo('<P>No file selected.</P>');
			};
		};
		
		if(isset($_POST['delConfirm']) && ($_POST['delConfirm']=='Confirm')) {
			if(isset($_POST['filename'])) {
				// Strip out any forward slashes for security
				$filename = 'backups/'.preg_replace('#/+#', '', $_POST['filename']);
				if(!file_exists($filename)) {
					echo('<P>File not found.</P>');
				} else {
					unlink($filename);
					echo('<P>Deleted.</P>');
				};
			} else {
				die('<P>An error occurred.</P>');
			};
		};
		
		if(isset($_POST['restoreConfirm']) && ($_POST['restoreConfirm']=='Confirm')) {
			$db = Database::getInstance();
			if(isset($_POST['filename'])) {
				// Strip out any forward slashes for security
				$filename = preg_replace('#/+#', '', $_POST['filename']);
				// Strip out any backticks or single quotes for security
				$filename = preg_replace('`/+`', '', $filename);
				$filename = 'backups/'.preg_replace("'/+'", '', $filename);
				if(!file_exists($filename)) {
					echo('<P>File '.$filename.' not found.</P>');
				} else {
					// Set up a temp folder
					if(!file_exists('tmp')) mkdir('tmp');
					$tempfolder = 'tmp/' . trim(time());

					// do the unzip
					shell_exec('unzip -d '.$tempfolder.' '.$filename);

					// purge the current inventory
					// Note:  tables will be TRUNCATEd during the import() calls below.
					//   This delete routine is primarily to remove the attachments and
					//   thumbnails from the disk.
					$inv = new Inventory();
					$items = $inv->allItems();
					foreach($items as $item) {
						$inv->deleteItem($item->getAttribute('id'));
					};

					// Close out the current Inventory instance
					unset($inv);
					
					// do the database restore
					// Important:  Restoration of locations, groups, and attachments must be completed
					//   before restoring the items.
					$db->import('locations',$tempfolder.'/locations.csv');
					$db->import('groups',$tempfolder.'/groups.csv');
					$db->import('attachments',$tempfolder.'/attachments.csv');
					$db->import('items',$tempfolder.'/items.csv');
					unlink($tempfolder.'/locations.csv');
					unlink($tempfolder.'/groups.csv');
					unlink($tempfolder.'/attachments.csv');
					unlink($tempfolder.'/items.csv');

					// Re-read the database
					$inv = new Inventory();

					// restore attachments
					
					function moveFiles($collection,$tempfolder) {
						$ignorelist = array('.', '..', '.gitignore', '.DS_Store');
						$filelist = scandir($tempfolder.'/'.$collection);
						
						foreach($ignorelist as $thisIgnore) {
							if (($key = array_search($thisIgnore, $filelist)) !== false) {
								unset($filelist[$key]);
							};
						};

						foreach($filelist as $thisFile) {
							if(file_exists($collection.'/'.$thisFile)) {
								// File already exists in destination folder, so remove it
								unlink($collection.'/'.$thisFile);
							};
							// Move the file from the temp folder to the destination
							rename ($tempfolder.'/'.$collection.'/'.$thisFile, $collection.'/'.$thisFile);
						};
					};
					
					moveFiles('attachments',$tempfolder);
					moveFiles('thumbs',$tempfolder);

					// regenerate any missing thumbnails
					$inv->regenerateThumbs(false);
					
					// clean up
					function recursiveRemoveDirectory($directory) {
						// stolen from http://stackoverflow.com/a/11267139/4909433
						foreach(glob("{$directory}/*") as $file) {
							if(is_dir($file)) { 
								recursiveRemoveDirectory($file);
							} else {
								unlink($file);
							};
						};
						rmdir($directory);
					};
					recursiveRemoveDirectory($tempfolder);
					
					echo('<p>Restore complete.</p>');

				};
			} else {
				echo('<P>An error occurred.</P>');
			};
		};
		
		
		break;
	case 'GET':
		break;
	default:
		break;
};

echo('<p>Backup files:</p>');
echo('<FORM NAME="backupForm" ID="backupForm" ACTION="backup.php" METHOD="POST">');
echo('<INPUT TYPE="HIDDEN" NAME="action" ID="action" VALUE="">');

// Note:  currently forcing the inclusion of thumbnails using the line below.
//   May want to replace this with a user confirmation/checkbox in the future.
echo('<INPUT TYPE="HIDDEN" NAME="thumbs" VALUE="1"/>');

$ignorelist = array('.', '..', '.gitignore', '.DS_Store');
$filelist = scandir('backups/');
foreach($ignorelist as $thisIgnore) {
	if (($key = array_search($thisIgnore, $filelist)) !== false) {
		unset($filelist[$key]);
	};
};

$br = '';
$found = false;
foreach($filelist as $thisFile) {
	if(strtolower(pathinfo('backups/'.$thisFile, PATHINFO_EXTENSION))=='zip') {
		$info = date('D M j, Y g:i a',filemtime('backups/'.$thisFile)).'; '.number_format(filesize('backups/'.$thisFile)).' bytes';
		echo($br . '<INPUT TYPE="RADIO" NAME="filename[]" ID="filename[]" VALUE="'.$thisFile.'"/>&nbsp;'.'<A HREF="backups/'.$thisFile.'">'.$thisFile.'</A> - '.$info);
		$found = true;
		$br = '<br/>';
	};
};

if($found) {
	echo('<br/><input class="shortButton" type="button" name="actionBtn" id="actionBtn[]" VALUE="Restore" onClick="javascript:restoreBackup()"/>');
	echo('<input class="shortButton" type="button" name="actionBtn" id="actionBtn[]" VALUE="Delete" onClick="javascript:deleteBackup()"/>');
} else {
	echo('<P>No backup files found.</P>');
}
if(!$found) {
	echo('<br/>');
};
echo('<input class="shortButton" type="button" name="actionBtn" id="actionBtn[]" VALUE="Create Backup" onClick="javascript:createBackup()"/>');

echo('</FORM>');
echo('<SPAN ID="message"></SPAN>');
?>
<?php include('footer.php');?>

	</BODY>
</HTML>
